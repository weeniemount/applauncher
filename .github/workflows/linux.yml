name: Build App Launcher for Linux

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            nodejs \
            npm \
            build-essential \
            dpkg-dev \
            fakeroot \
            rpm \
            rpm2cpio \
            ruby \
            ruby-dev \
            xz-utils \
            p7zip-full \
            unzip \
            python3 \
            squashfs-tools \
            libcrypt-dev

      - name: Install fpm gem
        run: sudo gem install fpm

      - name: Set USE_SYSTEM_FPM env var
        run: echo "USE_SYSTEM_FPM=true" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install npm dependencies
        run: npm install

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build App Launcher (Linux x64)
        run: npm run dist -- --linux --x64

      - name: Rename x64 artifacts
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          for ext in deb rpm AppImage; do
            for file in dist/*.${ext}; do
              [ -e "$file" ] || continue
              mv "$file" "dist/applauncher-${VERSION}-linux-x64.${ext}"
            done
          done

      - name: Upload x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: applauncher-linux-x64
          path: |
            dist/applauncher-*-linux-x64.deb
            dist/applauncher-*-linux-x64.rpm
            dist/applauncher-*-linux-x64.AppImage

      - name: Clean dist folder before x86 build
        run: rm -rf dist/*

      - name: Build App Launcher (Linux x86)
        run: npm run dist -- --linux --ia32

      - name: Rename x86 artifacts
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          for ext in deb rpm AppImage; do
            for file in dist/*.${ext}; do
              [ -e "$file" ] || continue
              mv "$file" "dist/applauncher-${VERSION}-linux-ia32.${ext}"
            done
          done

      - name: Upload x86 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: applauncher-linux-ia32
          path: |
            dist/applauncher-*-linux-ia32.deb
            dist/applauncher-*-linux-ia32.rpm
            dist/applauncher-*-linux-ia32.AppImage
